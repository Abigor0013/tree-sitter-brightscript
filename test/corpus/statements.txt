==================
Print statement without params
==================

sub x()
    print("hi")
end sub
---

(source_file
  (sub_definition
    (identifier)
    (parameter_list)
    (block
      (print_statement
        (parenthesized_expression
            (literal
                (string)))))))


==================
Print statements with params
==================

sub x(y as string)
    print(y)
end sub
---

(source_file
  (sub_definition
    (identifier)
    (parameter_list
      (parameter
        (identifier)
        (type_specifier)
      )
    )
    (block
     (print_statement
      (parenthesized_expression
       (identifier))))))

==================
Print statements with comma sep params
==================

sub x(y as string, x as string)
    print(x)
end sub
---

(source_file
 (sub_definition
  (identifier)
  (parameter_list
   (parameter
    (identifier)
    (type_specifier)
   )
   (parameter
    (identifier)
    (type_specifier)
   )
  )
  (block
   (print_statement
    (parenthesized_expression
     (identifier))))))


==================
function return type string
==================

function x() as string
    return "hi"
end function
---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type_specifier))
    (block
     (return_statement
      (literal
       (string))))))

==================
empty sub
==================

sub init()
end sub
---

(source_file
  (sub_definition
    (identifier)
    (parameter_list)))

==================
Library definition
==================
Library "Roku_Ads.brs"

sub x()
    print("hi")
end sub
---

(source_file
  (library_definition
    (string))
  (sub_definition
    (identifier)
    (parameter_list)
    (block
      (print_statement
        (parenthesized_expression
            (literal
                (string)))))))

====================
invalid return statement
====================
function x() as object
    return invalid
end function
---

(source_file
  (function_definition
    (identifier)
    (parameter_list)
    (return_type
      (type_specifier))
    (block
      (return_statement
        (literal
          (invalid))))))

==================
print shortcut statement
:skip
==================

sub init()
  x = 5
  ? "The value of x is:"; x; " and x * 2 is:"; x * 2
end sub

---

(source_file
  (sub_definition
    (identifier)
    (parameter_list)
    (block
      (assignment_statement
        (identifier)
        (literal
          (number)))
      (print_shortcut_statement
        (literal
          (string))
        (identifier)
        (literal
          (string))
        (binary_expression
          (arithmetic_expression
            (identifier)
            (literal
              (number))))))))

